{"ast":null,"code":"var _jsxFileName = \"F:\\\\React - The complete Guide (Hooks, React Router, Redux)\\\\02-starting-project\\\\src\\\\components\\\\CourseGoals\\\\CourseInput\\\\CourseInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../../UI/Button/Button\";\nimport \"./CourseInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormControl = styled.div`\n  margin: 0.5rem 0;\n\n  & label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n  }\n\n  & input {\n    display: block;\n    width: 100%;\n    border: 1px solid ${props => props.invalid ? \"red\" : \"#ccc\"};\n    background: ${props => props.invalid ? \"rgb(228, 147, 147)\" : \"transparent\"};\n\n    font: inherit;\n    line-height: 1.5rem;\n    padding: 0 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    background: #fad0ec;\n    border-color: #8b005d;\n  }\n\n  &.invalid input {\n    border-color: red;\n    background-color: rgb(228, 147, 147);\n  }\n\n  &.invalid label {\n    border-color: red;\n  }\n`;\n_c = FormControl;\n\nconst CourseInput = props => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isValidInput, setIsValidInput] = useState(true);\n\n  const goalInputChangeHandler = event => {\n    if (event.target.value.trim().length > 0) {\n      setIsValidInput(true);\n    }\n\n    setEnteredValue(event.target.value);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n\n    if (enteredValue.trim().length === 0) {\n      // checking if the user entered an epmty string (notning)\n      //trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string.\n      setIsValidInput(false);\n      return;\n    }\n\n    props.onAddGoal(enteredValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      invalid: !isValidInput,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Course Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: goalInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Add Goal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CourseInput, \"gx6AxxA2kz+QQDTxas6c0Qa44XE=\");\n\n_c2 = CourseInput;\nexport default CourseInput; //Template literals{``} are literals delimited with backtick (`) characters, allowing for multi-line strings,\n// for string interpolation with embedded expressions, and for special constructs called tagged templates.\n// `string text ${expression} string text`\n// ADDING STYLES DYNAMICALLY:\n// {`form-control ${!isValidInput? \"invalid\" : \"\"}`}> returns a: form-control or form-control invalid\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormControl\");\n$RefreshReg$(_c2, \"CourseInput\");","map":{"version":3,"names":["React","useState","styled","Button","FormControl","div","props","invalid","CourseInput","enteredValue","setEnteredValue","isValidInput","setIsValidInput","goalInputChangeHandler","event","target","value","trim","length","formSubmitHandler","preventDefault","onAddGoal"],"sources":["F:/React - The complete Guide (Hooks, React Router, Redux)/02-starting-project/src/components/CourseGoals/CourseInput/CourseInput.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Button from \"../../UI/Button/Button\";\nimport \"./CourseInput.css\";\n\nconst FormControl = styled.div`\n  margin: 0.5rem 0;\n\n  & label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n  }\n\n  & input {\n    display: block;\n    width: 100%;\n    border: 1px solid ${props=> props.invalid ? \"red\" : \"#ccc\"};\n    background: ${props=> props.invalid ? \"rgb(228, 147, 147)\" : \"transparent\"};\n\n    font: inherit;\n    line-height: 1.5rem;\n    padding: 0 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    background: #fad0ec;\n    border-color: #8b005d;\n  }\n\n  &.invalid input {\n    border-color: red;\n    background-color: rgb(228, 147, 147);\n  }\n\n  &.invalid label {\n    border-color: red;\n  }\n`;\n\nconst CourseInput = (props) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isValidInput, setIsValidInput] = useState(true);\n\n  const goalInputChangeHandler = (event) => {\n    if (event.target.value.trim().length > 0) {\n      setIsValidInput(true);\n    }\n    setEnteredValue(event.target.value);\n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    if (enteredValue.trim().length === 0) {\n      // checking if the user entered an epmty string (notning)\n      //trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string.\n      setIsValidInput(false);\n      return;\n    }\n    props.onAddGoal(enteredValue);\n  };\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <FormControl invalid={!isValidInput}>\n        <label>Course Goal</label>\n        <input type=\"text\" onChange={goalInputChangeHandler} />\n        </FormControl>\n      <Button type=\"submit\">Add Goal</Button>\n    </form>\n  );\n};\n\nexport default CourseInput;\n\n//Template literals{``} are literals delimited with backtick (`) characters, allowing for multi-line strings,\n// for string interpolation with embedded expressions, and for special constructs called tagged templates.\n// `string text ${expression} string text`\n// ADDING STYLES DYNAMICALLY:\n// {`form-control ${!isValidInput? \"invalid\" : \"\"}`}> returns a: form-control or form-control invalid\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,mBAAP;;AAEA,MAAMC,WAAW,GAAGF,MAAM,CAACG,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBC,KAAK,IAAGA,KAAK,CAACC,OAAN,GAAgB,KAAhB,GAAwB,MAAO;AAC/D,kBAAkBD,KAAK,IAAGA,KAAK,CAACC,OAAN,GAAgB,oBAAhB,GAAuC,aAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCA;KAAMH,W;;AAoCN,MAAMI,WAAW,GAAIF,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,IAAD,CAAhD;;EAEA,MAAMY,sBAAsB,GAAIC,KAAD,IAAW;IACxC,IAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,GAA0BC,MAA1B,GAAmC,CAAvC,EAA0C;MACxCN,eAAe,CAAC,IAAD,CAAf;IACD;;IACDF,eAAe,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CALD;;EAOA,MAAMG,iBAAiB,GAAIL,KAAD,IAAW;IACnCA,KAAK,CAACM,cAAN;;IACA,IAAIX,YAAY,CAACQ,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAsC;MACpC;MACA;MACAN,eAAe,CAAC,KAAD,CAAf;MACA;IACD;;IACDN,KAAK,CAACe,SAAN,CAAgBZ,YAAhB;EACD,CATD;;EAWA,oBACE;IAAM,QAAQ,EAAEU,iBAAhB;IAAA,wBACE,QAAC,WAAD;MAAa,OAAO,EAAE,CAACR,YAAvB;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,QAAQ,EAAEE;MAA7B;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAKE,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CA/BD;;GAAML,W;;MAAAA,W;AAiCN,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}