{"ast":null,"code":"var _jsxFileName = \"F:\\\\React - The complete Guide (Hooks, React Router, Redux)\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\"); // MULITIPLE STATE APROACH\n\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\"); // ALTERNATIVE WAY: instead of using 3 separate useState(), we can use 1 for all 3 inputs.\n  //   const [userInput, setUserInput] = useState({    //inside useState() we are passing an object instead of empty string\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); ///////////////// THE ALTERNATIVE WAY IS BELOW /////////////////////////\n    // setUserInput({\n    //   ...userInput, // the userInput object stays the same, we are only updating the title (spread operator) // THIS IS BAD PRACTICE BECAUSE WE MAY END UP USING AOUTDATED STATE\n    //   enteredTitle: event.target.value,\n    // });\n    // setUserInput((prevState) => {       // prevState is always the latest state. We can use this if the state we are updating depends on the previous state\n    //     return{...prevState, enteredTitle: event.target.value }\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // so the page dosen't refresh\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData); // this function is inside NewExpense\n\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["F:/React - The complete Guide (Hooks, React Router, Redux)/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\"); // MULITIPLE STATE APROACH\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n    const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  // ALTERNATIVE WAY: instead of using 3 separate useState(), we can use 1 for all 3 inputs.\r\n\r\n//   const [userInput, setUserInput] = useState({    //inside useState() we are passing an object instead of empty string\r\n//     enteredTitle: \"\",\r\n//     enteredAmount: \"\",\r\n//     enteredDate: \"\",\r\n//   });\r\n\r\n  const titleChangeHandler = (event) => {\r\n     setEnteredTitle(event.target.value);\r\n\r\n///////////////// THE ALTERNATIVE WAY IS BELOW /////////////////////////\r\n\r\n    // setUserInput({\r\n    //   ...userInput, // the userInput object stays the same, we are only updating the title (spread operator) // THIS IS BAD PRACTICE BECAUSE WE MAY END UP USING AOUTDATED STATE\r\n    //   enteredTitle: event.target.value,\r\n    // });\r\n\r\n    // setUserInput((prevState) => {       // prevState is always the latest state. We can use this if the state we are updating depends on the previous state\r\n    //     return{...prevState, enteredTitle: event.target.value }\r\n    // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n     setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n     setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n  };\r\n\r\n\r\n  const submitHandler = (event)=>{\r\n\r\n    event.preventDefault(); // so the page dosen't refresh\r\n\r\n    const expenseData = {\r\n        title: enteredTitle,\r\n        amount: enteredAmount,\r\n        date: new Date(enteredDate)\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData); // this function is inside NewExpense\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n      <button type=\"submit\">Cancel</button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"]},"metadata":{},"sourceType":"module"}